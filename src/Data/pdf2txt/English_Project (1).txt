
Project report and
documentation
Project OpenWord Cloud

English project

DIAME Jean-François, REHIOUI Walid

Année 2018-2019



Table des matières

Table des matières 1

1 Preamble 2

2 User documentation (English) 3

2.1 Home page . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3

2.2 Create or load vocabulary lists . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 4

2.3 Binge Learning . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 5

2.4 Mini-Games . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 5

2.4.1 De�nition Matching . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 5

2.4.2 Spell Check . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 6

2.4.3 Fill in the Blank . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 6
2.4.4 Scoring system . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 6

2.5 Game Help . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 7

3 Documentation technique (Français) 9

3.1 Patron de conception . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 9

3.2 Parsing de pages HTML de dé�nitions . . . . . . . . . . . . . . . . . . . . . . . . . 9

3.3 Parsing des �chiers XML de listes de vocabulaire . . . . . . . . . . . . . . . . . . . 10

3.4 Esthétisme et ergonomie . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 10

4 Conclusion 11

5 Sources 12

Sources 12

5.0.1 Sites Web . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 12

Sites Web . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 12

5.0.2 Outils . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 12

Outils . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 12



1 Preamble

OpenWord Cloud is a Java application that allows users to choose which words they want to
learn and provides them with fun games to help them train and learn their English vocabulary
and expressions. We made it so that people who don’t like the know-by-heart approach could
learn their vocabulary in an easy and interactive way !

In this report begins with a User Documentation written in English. It describes our application’s
features and gives guidelines to enhance the user’s experience.
The second part of our report is some Technical Documentation (written in French) which des-
cribes all technical aspects of our application.
Finally, you will �nd at the end of this report a Sources section that lists the sites and tools we
used to develop our application.

2



2 User documentation (English)

2.1 Home page

The Home page is quite simple, and we made sure it was as intuitive as possible while not being
too restrictive to the user.

In the right part of the main interface, the user will �nd three buttons :
— "Import" : this button allows the user to load lists of words into the application, to be used

in games.
— "Create new list" : this one allows a user to create a new OpenWordsCloud compatible

list of words from a text �le containing words (see ??)
— "Clear Lists" : unloads loaded lists from the application.

The left part of the main interface is a simple list of games, which can be launched with a click.
But in order to launch a game, the user must �rst select one or more list(s) of words by clicking
it/them.

When launching the program you will see a greeting message on how to get started with the
application. Once you’ve clicked on ’OK’ the main interface will appear on the screen.

Figure 2.1 – Welcome message Figure 2.2 – The main interface

The main interface contains a space for vocabulary lists to the right and an environment reserved
for the di�erent games of the application.
The �rst thing a user would want to do is to load pre-existing vocabulary lists or to create new
ones from it’s own selection of words. To load pre-existing lists the user clicks on the ’Import’

3



button and select a .xml �le.

Figure 2.3 – Loading vocabulary lists

If the player wishs to create new vocabulary sets from it’s own list of words in a .txt �le, he clicks
on the ’Create new list’ button and selects the .txt �le. Fetching for de�nitions, examples and
synonyms on the Internet can take some time but once this process is done his new vocabulary
list will be automatically separated in sections and displayed.

2.2 Create or load vocabulary lists

Here we will describe in more details the ins and outs of our vocabulary lists system.

The lists used by our application are stored as .XML �les. Their structure is OpenWordsCloud
speci�c, which means only an .xml �les generated by an OpenWordsCloud application (or writ-
ten by hand in the OpenWordCloud format) can be read by another OpenWordCloud app.

Because our application was designed to allow users to choose how to learn their English voca-
bulary and expressions, we created and integrated an OpenWordsCloud .xml �le generator in the
application.
This generator converts a user’s personal list of words into an OpenWordsCloud compatible �le,
and then loads it into the App.
To use it, only two things are required of the user : an internet connection and that the words
be stored one word per line in the user text �le.
Disclaimer : when a word’s de�nition or example is not found online, it is ignored.

To use this generator, the user can click on the "Create new list" button in the Home page.

4



Figure 2.4 – Loading vocabulary lists

The user must then select his text �le, click on "Open" and wait for the OpenWordsCloud �le
to be generated and loaded.

To simply load an existing OpenWordsCloud .xml �le, the user can click on "Import", and
then navigate in the new window to the right folder to select the �le. The user must �nalise the
procedure by clicking on "Open".

2.3 Binge Learning

The Binge Leaning area is the place where to study before playing.
In this area, the de�nition for a word in the selected list(s) is displayed. To see a usage example
or synonyms, the user can simply click on the board once. To swich back to the de�nition, the
user can simply click again.
When the user wants to study another word, he can click on one of the side arrows to change the
displayed word.

2.4 Mini-Games

2.4.1 De�nition Matching

The objective is simple : the player must match a de�nition to the word displayed on the left of
the screen.
Every wrong answer makes the water level rise.

5



Once the player has selected the right de�nition, he will be able to move on to the next word.
If the player makes it to the end of the list, he has won !

2.4.2 Spell Check

The objective is simple : the player must �nd a potential mistake in the displayed sentence.
Every wrong answer makes the water level rise.
If there is a mistake, the player must click on it, else he must click on "Nothing was misspelled
here".
Once the player has selected the right answer, he will be able to move on to the next word.
If the player makes it to the end of the list, he has won !

2.4.3 Fill in the Blank

Figure 2.5 – Example of exercise

The objective is simple : the player must �nd the missing word in the displayed sentence.
Every wrong answer makes the water level rise.
Once the player has selected the right answer, he will be able to move on to the next word.
If the player makes it to the end of the list, he has won !

2.4.4 Scoring system

Every time a player gets something right, his score increases. At anytime of a game, the player’s
score is displayed at the top of the screen

6



Figure 2.6 – Example of �nding the right answer

The score is calculated so that if the player makes very few mistakes, his score will increase and
so that a player playing with a longer list can reach higher score.

2.5 Game Help

in every environment of the application we provide a helping window, that can be opened by cli-
cking on the help sign. Each helping window explains the essential aspects of the corresponding
environment.

7



Figure 2.7 – Example of a help window

8



3 Documentation technique (Français)

3.1 Patron de conception

Dans le cadre de ce projet, nous avons essayé de mettre en oeuvre le maximum de bonnes pra-
tiques apprises durant nos (presque) deux ans d’école.
Ainsi, nous avons utilisé un patron de conception (Design Pattern) qui correspond au Modèle-
Vue-Contrôleur (MVC).

Les classes Java qui correspondent au Modèle contiennent le coeur du jeu : les listes des listes
de vocabulaire disponibles et sélectionnées, ainsi que les fonctions qu’on utilise pour rendre les
jeux aléatoires et récuperer les informations nécessaires à la construction des jeux. Les Vues s’oc-
cupent de tout ce qui est a�chage, ce sont les classes qui assurent l’interaction entre l’utilisateur
et le fond de l’application.
En�n, les classes qui correspondent aux Contrôleurs ont pour fonction de s’occuper de l’inter-
action entre les deux. Lorsque le joueur clique sur une liste ou un button du jeu, il déclenche le
contrôleur qui lui est associé et va eventuellement modi�er le modèle, qui met alors à jour ses
données, et prévient la vue qu’il y a eu du changement.

Bien que parfois di�cile à suivre et à organiser, cette façon de programmer nous a permis d’écrire
e�cacement notre projet, de façon claire et par intégrations.

De plus, nous avons conçu et implémenté une structure de données adaptée à la gestion des
mots, leurs dé�nitions, phrases d’exemple et synonymes. Il s’agit d’un objet appelé Dictionnary,
qui contient des objets Entry et qui contient des HashMap pour l’indexation des mots. Cette
structure permet d’accéder aux informations nécessaires très rapidement, ce qui rend l’éxpérience
utilisateur plus agréable.

3.2 Parsing de pages HTML de dé�nitions

La librairie JSoup 1.10.2 nous a permis de réaliser des requêtes sur internet et de parser les pages
retournées.

Nous l’avons utilisée :
— pour interroger le site wordreference.com a�n d’obtenir une dé�nition pour mot.
— pour interroger le site thesaurus.com a�n d’obtenir des synonymes pour un mot.
— pour interroger le site sentence.yourdictionary.com a�n d’obtenir un example pour un

mot.

9



À partir de ces information, nous pouvons ajouter une entrée à un �chier XML de listes de voca-
bulaire. Cela semble assez simple en principe, mais il faut noter que a�n de récupérer les di�é-
rentes informations dans les di�érentes pages web, il a fallu étudier leurs structures pour déter-
miner précisément où trouver la donnée recherchée. Ensuite il a fallu créer un parseur adapté à
chaque site et à chaque donnée à y récupérer. Nous avons rencontré deux autres di�cultées :

— La réalisation de 3 requêtes internet par mot peut s’avérer ralentie par une mauvaise
connection internet.

— Pendant l’implémentation des parseurs, les protection des sites contre les attaques internet
se sont déclenchées en réponse à notre batterie de test qui réalisait trop de requêtes dans
un laps de temps réduit.

3.3 Parsing des �chiers XML de listes de vocabulaire

La librairie JDOM 2.0.6 pour le parsage de �chiers .xml nous a permis de charger très facilement
tous les éléments nécessaires au bon apprentissage dun mot de vocabulaire dans notre appli-
cation. Cette libraire nous a donc permis d’avoir une ’base de données’ très simple, facilement
générable et très facile à parser sous la forme de �chiers XML. Pour que l’application marche, il
est absolument nécessaire de garder le �chier ’dictionnaire.dtd’ qui dé�nit la structure de tous
les �chiers .xml de listes de vocabulaire à parser

3.4 Esthétisme et ergonomie

Puisqu’il s’agit d’un produit qui doit être accessible à un public qui n’est pas informaticien, nous
avons mis un e�ort particulier sur l’interface graphique, en s’attardant sur l’aspect esthétique.

Nous avons fait une interface pas trop extravagante, épurée et qui assure la lisibiité des exercices
et des mots. Nous avons utilisé JavaFx de Java à cet e�et. Nous avons de l’expérience en pro-
grammation java ansi que la programmation en javaFX, de par sa simplicité et les nombreuses
possibilités qu’elle o�re

Les images que nous avons utilisées sont des images libres ou des images que nous avons créés
nous mêmes (par exemple, les .gif de défaite et victoire ainsi que le logo de l’application).

10



4 Conclusion

Ce projet nous a permis d’explorer d’autres façons de concevoir un logiciel, tout en nous inter-
rogeant sur les possibilités pédagogiques qu’un tel jeu pourrait o�rir. En tant que concepteurs
et développeurs de logiciels c’était intéressant d’avoir la liberté de création et d’implémentation
d’un logiciel dès le début et déterminer nous mêmes ce qu’on voulait faire.

Notre objectif était de créer une application qui puisse être utilisable peu importe le niveau d’an-
glais de l’utilisateur et où la base de données de mots ou examples pour les exercices ne soit pas
statique mais qu’elle puisse evoluer selon la volonté de l’utilisateur. Nous pensons avoir atteint
cet objectif

11



5 Sources

Nous avons utiliser la platforme github pour avoir des cas d’applications pour les di�érentes
applications utilisés
https://github.com/

5.0.1 Sites Web

Nous avons utilisé des sites Web d’aide comme

StackOver�ow pour débugger notre application

5.0.2 Outils

Nous avons utilisé deux librairies Java dans notre l’application
— JDOM 2.0.6 - Une librairie pour le parsage des �chiers .xml contenant les mots
— JSOUP 1.10.2 - Une librairie pour le parsage des résultats des requêtes HTML contenant

les de�nitions et examples des mots choisis

12

https://github.com/
http://stackoverflow.com/

	Table des matières
	Preamble
	User documentation (English)
	Home page
	Create or load vocabulary lists
	Binge Learning
	Mini-Games
	Definition Matching
	Spell Check
	Fill in the Blank
	Scoring system

	Game Help

	Documentation technique (Français)
	Patron de conception
	Parsing de pages HTML de définitions
	Parsing des fichiers XML de listes de vocabulaire
	Esthétisme et ergonomie

	Conclusion
	Sources
	Sources
	Sites Web
	Sites Web
	Outils


	Outils







Metadata of the PDF:
File Name : English_Project (1)
PATH : /home/mohamed/linux/2A/PIDR/final/Data/pdf2txt/English_Project (1).pdf
date : 2019-04-28T12:06:06Z
pdf:PDFVersion : 1.5
pdf:docinfo:title : Rapport de projet - Anglais
xmp:CreatorTool : LaTeX with hyperref package
Keywords : TeX, LaTeX, graphics, images
access_permission:modify_annotations : true
access_permission:can_print_degraded : true
subject : TeX and LaTeX
dc:creator : DIAME Jean-François, REHIOUI Walid
dcterms:created : 2019-04-28T12:06:06Z
Last-Modified : 2019-04-28T12:06:06Z
dcterms:modified : 2019-04-28T12:06:06Z
dc:format : application/pdf; version=1.5
title : Rapport de projet - Anglais
Last-Save-Date : 2019-04-28T12:06:06Z
pdf:docinfo:creator_tool : LaTeX with hyperref package
access_permission:fill_in_form : true
pdf:docinfo:keywords : TeX, LaTeX, graphics, images
pdf:docinfo:modified : 2019-04-28T12:06:06Z
meta:save-date : 2019-04-28T12:06:06Z
pdf:encrypted : false
dc:title : Rapport de projet - Anglais
pdf:docinfo:custom:PTEX.Fullbanner : This is pdfTeX, Version 3.14159265-2.6-1.40.17 (TeX Live 2016) kpathsea version 6.2.2
modified : 2019-04-28T12:06:06Z
cp:subject : TeX and LaTeX
pdf:docinfo:subject : TeX and LaTeX
Content-Type : application/pdf
pdf:docinfo:creator : DIAME Jean-François, REHIOUI Walid
PTEX.Fullbanner : This is pdfTeX, Version 3.14159265-2.6-1.40.17 (TeX Live 2016) kpathsea version 6.2.2
creator : DIAME Jean-François, REHIOUI Walid
meta:author : DIAME Jean-François, REHIOUI Walid
dc:subject : TeX, LaTeX, graphics, images
trapped : False
meta:creation-date : 2019-04-28T12:06:06Z
created : 2019-04-28T12:06:06Z
access_permission:extract_for_accessibility : true
access_permission:assemble_document : true
xmpTPg:NPages : 13
Creation-Date : 2019-04-28T12:06:06Z
access_permission:extract_content : true
access_permission:can_print : true
pdf:docinfo:trapped : False
meta:keyword : TeX, LaTeX, graphics, images
Author : DIAME Jean-François, REHIOUI Walid
producer : pdfTeX-1.40.17
access_permission:can_modify : true
pdf:docinfo:producer : pdfTeX-1.40.17
pdf:docinfo:created : 2019-04-28T12:06:06Z
